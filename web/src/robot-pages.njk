---
# @formatter:off
layout: layout.njk
pagination:
  data: robots
  size: 1
  alias: robot
  addAllPagesToCollections: true
permalink: "robots/{{ robot.name | lower | replace(' ', '-') }}/"
eleventyComputed:
  title: "{{ robot.name }}"
  eleventyNavigation:
    key: "{{ robot.name }}"
    order: 2
# @formatter:on
---

<section class="mb-0 py-2.5 pl-5">
    <h1 class="text-4xl font-extrabold dark:text-white">{{ robot.name }}</h1>
    <hr class="mb-5 w-1/4">
    <div class="grid grid-cols-2 grid-flow-col gap-4">
        <div class="grid grid-cols-1 grid-flow-row gap-4">
            <div class="mb-5">
                <label for="ip_field"
                       class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Connect</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        {% svg "settings", "w-5 h-5 text-gray-500 dark:text-gray-400" %}
                    </div>
                    <input type="text" id="ip_field"
                           class="peer block w-full pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:text-gray-400"
                           placeholder="x.x.x.x" required>
                    <p class="invisible peer-invalid:visible text-red-700 font-light absolute -z-10">
                        A valid IP address is required.
                    </p>
                    <button type="button" id="connect" onclick="connect_or_disconnect()"
                            class="text-white absolute right-0 bottom-0 border border-blue-700 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-r-lg text-sm px-4 py-2 dark:border-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                        Connect
                    </button>
                </div>
            </div>
            <div class="grid grid-rows-4 grid-flow-col gap-4">
                <button type="button" onclick="send_command('forward ' + speed)"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    FORWARD
                </button>
                <button type="button" onclick="send_command('backward ' + speed)"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    BACKWARD
                </button>
                <button type="button" onclick="send_command('left ' + speed)"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    LEFT
                </button>
                <button type="button" onclick="send_command('right ' + speed)"
                        class="text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                    RIGHT
                </button>
                <button type="button" onclick="send_command('stop')"
                        class="text-white bg-red-700 hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-300 font-medium rounded-full text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">
                    STOP
                </button>
            </div>
            <div class="justify-self-center mt-5">
                <input type="image" src="/assets/img/emergency.png" class="h-48 w-48 rounded filter hover:contrast-75"
                       alt="Emergency Stop" onclick="kill_connection()">
            </div>
        </div>
        <div class="grid grid-cols-1 grid-flow-row gap-4">
            <div>CAMERA</div>
            <div class="grid grid-cols-2 grid-flow-row gap-4 align-middle">
                <svg id="axis1" viewBox="-2.2 -2.2 4.4 4.4" width="135" height="160" class="justify-self-center">
                    <circle cx="0" cy="0" r="2" fill="none" stroke="#fff" stroke-width="0.04"/>
                    <path d="M0,-2L0,2M-2,0L2,0" stroke="#fff" stroke-width="0.04"/>
                    <circle cx="0" cy="0" r="0.22" fill="#FF0C00" class="axis"/>
                </svg>
                <svg id="axis2" viewBox="-2.2 -2.2 4.4 4.4" width="135" height="160">
                    <circle cx="0" cy="0" r="2" fill="none" stroke="#fff" stroke-width="0.04"/>
                    <path d="M0,-2L0,2M-2,0L2,0" stroke="#fff" stroke-width="0.04"/>
                    <circle cx="0" cy="0" r="0.22" fill="#FF0C00" class="axis"/>
                </svg>
            </div>
        </div>
    </div>
</section>

<script>

    // Websocket
    const ip = document.getElementById("ip_field");
    const connect_btn = document.getElementById("connect");

    let socket = null;
    let speed = 125 ;

    function connect_or_disconnect() {
        if (socket === null || socket.readyState !== WebSocket.OPEN) {
            if (socket !== null && socket.readyState === WebSocket.CONNECTING) {
                socket.close();
                ip.disabled = false;
                connect_btn.disabled = false;
                connect_btn.innerText = "Connect";
                return;
            }

            if (ip.value === "") {
                return;
            }

            ip.disabled = true;
            connect_btn.innerText = "Connecting...";
            socket = new WebSocket('ws://' + ip.value + ':7933');

            socket.addEventListener('close', (event) => {
                ip.disabled = false;
                connect_btn.disabled = false;
                connect_btn.innerText = "Connect";
            });

            socket.addEventListener('open', (event) => {
                connect_btn.innerText = "Disconnect";
            });
        } else {
            socket.close();
        }
    }

    function kill_connection() {
        try {
            socket.close();
        } finally {
            ip.disabled = false;
            connect_btn.disabled = false;
            connect_btn.innerText = "Connect";
        }
    }

    function send_command(command) {
        if (socket !== null && socket.readyState === WebSocket.OPEN) {
            socket.send(command);
        }
    }

    // Gamepads
    const axis1 = document.querySelector("#axis1 .axis");
    const axis2 = document.querySelector("#axis2 .axis");

    let haveEvents = 'ongamepadconnected' in window;
    let controllers = {};
    let update_counter = 0;

    function connect_handler(e) {
        controllers[e.gamepad.index] = e.gamepad;
        requestAnimationFrame(updateStatus);
    }

    function disconnect_handler(e) {
        delete controllers[e.gamepad.index];
    }

    function updateStatus() {
        if (!haveEvents) {
            scan_gamepads();
        }

        let controller = controllers[0];
        axis1.setAttributeNS(null, "cx", controller.axes[0] * 2);
        axis1.setAttributeNS(null, "cy", controller.axes[1] * 2);
        axis2.setAttributeNS(null, "cx", controller.axes[2] * 2);
        axis2.setAttributeNS(null, "cy", controller.axes[3] * 2);

        if (update_counter >= 10) {
            if (Math.abs(controller.axes[0]) > 0.2 || Math.abs(controller.axes[1]) > 0.2 || Math.abs(controller.axes[2]) > 0.2) {
                let direction = null;

                if (Math.abs(controller.axes[0]) > 0.2 || Math.abs(controller.axes[1]) > 0.2)
                    direction = Math.atan2(-controller.axes[1], controller.axes[0]);

                send_command("move " + direction + " " + speed + " " + controller.axes[2]);
            } else {
                send_command("stop");
            }

            console.log("send command", -controller.axes[0], controller.axes[1]);
            update_counter = 0;
        }
        update_counter++;
        requestAnimationFrame(updateStatus);
    }

    function scan_gamepads() {
        let gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (let i = 0; i < gamepads.length; i++) {
            if (gamepads[i]) {
                if (gamepads[i].index in controllers) {
                    controllers[gamepads[i].index] = gamepads[i];
                } else {
                    connect_handler(gamepads[i]);
                }
            }
        }
    }

    window.addEventListener("gamepadconnected", connect_handler);
    window.addEventListener("gamepaddisconnected", disconnect_handler);

    if (!haveEvents) {
        setInterval(scan_gamepads, 500);
    }


</script>
